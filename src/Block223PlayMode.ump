class Block223 {
   1 <@>- * PlayedGame playedGames;
   1 <@>- * HallOfFameEntry entries;
   
   public PlayedGame findPlayableGame(int id) {
      for (PlayedGame game : playedGames) {
         if (game.getId() == id)
            return game;
      }
      return null;
   }
}

class Game {
   Boolean published = false;
   1 -> 0..1 HallOfFameEntry mostRecentEntry;
   
   public Block getRandomBlock() {
      Random rand = new Random();
      int index = rand.nextInt(blocks.size());
      return blocks.get(index);
   }
}

class PlayedGame {
	depend java.awt.geom.*;
	
   const Integer INITIAL_WAIT_TIME = 1000; // at design time, the initial wait time may be adjusted as seen fit
   autounique id;
   const Integer NR_LIVES = 3;
   Integer score = 0;
   Integer lives = NR_LIVES;
   Integer currentLevel = 1;
   Double waitTime = INITIAL_WAIT_TIME;
   * -- 0..1 Player player; // an admin may test the game; a game is played in test mode if player == null
   playername; // added here so that it only needs to be determined once
   
   // the PlayedBall and PlayedPaddle are not in a separate class to avoid the bug in Umple that occurred for the second constructor of Game

   // no direct link to Ball, because the ball can be found by navigating to PlayedGame, Game, and then Ball
   const Integer BALL_INITIAL_X = Game.PLAY_AREA_SIDE / 2;
   const Integer BALL_INITIAL_Y = Game.PLAY_AREA_SIDE / 2;
   // 0/0 is the top left corner of the play area, i.e., a directionX/Y of 0/1 moves the ball down in a straight line
   defaulted Double ballDirectionX = getGame().getBall().getMinBallSpeedX();
   defaulted Double ballDirectionY = getGame().getBall().getMinBallSpeedY();
   // the position of the ball is at the center of the ball
   defaulted Double currentBallX = BALL_INITIAL_X;
   defaulted Double currentBallY = BALL_INITIAL_Y;

   // no direct link to Paddle, because the paddle can be found by navigating to PlayedGame, Game, and then Paddle
   const Integer PADDLE_MOVE_RIGHT = 1; // pixels moved when right arrow key is pressed
   const Integer PADDLE_MOVE_LEFT = -1; // pixels moved when left arrow key is pressed
   Double currentPaddleLength = getGame().getPaddle().getMaxPaddleLength();
   // the position of the paddle is at its top right corner
   defaulted Double currentPaddleX = (Game.PLAY_AREA_SIDE - currentPaddleLength) / 2;
   immutable Double currentPaddleY = Game.PLAY_AREA_SIDE - Paddle.VERTICAL_DISTANCE - Paddle.PADDLE_WIDTH;

   * -- 1 Game game;
   1 <@>- * PlayedBlockAssignment blocks;
   0..1 -> 0..1 BouncePoint bounce;
   
   //helper, returns the sign of the argument
   private double signum(double a) {
	   if(a>=0)
		   return 1;
	   else
		   return -1;
	   
   }

   private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block) {
	BouncePoint returnedBp = null;
    int xBlock = block.getX();
	int yBlock = block.getY();
	int sideBlock = Block.SIZE;
	int ballRadius = Ball.BALL_DIAMETER / 2 ;
	
	 ArrayList<BouncePoint> allIntersections = new ArrayList<BouncePoint>();
	
	 // blockshape + yellow line
	Rectangle2D blockShape = new Rectangle2D.Double(xBlock - ballRadius,yBlock - ballRadius, sideBlock + 2*ballRadius, sideBlock + 2*ballRadius );
	
	Line2D path = new Line2D.Double(currentBallX,currentBallY,currentBallX + ballDirectionX, currentBallY + ballDirectionY);
	
	if(!blockShape.intersectsLine(path)) {
		return null;
	}
		// segments representing the sides of the block
		Line2D blockTopLine = new Line2D.Double(xBlock,yBlock - ballRadius,
				xBlock + sideBlock, yBlock - ballRadius);
		
		Line2D blockBottomLine = new Line2D.Double(xBlock,yBlock + ballRadius + sideBlock,
				xBlock + sideBlock, yBlock + ballRadius + sideBlock);
		
		Line2D blockRightLine = new Line2D.Double(xBlock + ballRadius + sideBlock ,yBlock,
				xBlock + ballRadius + sideBlock, yBlock + sideBlock);
		
		Line2D blockLeftLine = new Line2D.Double(xBlock - ballRadius ,yBlock,
				xBlock - ballRadius, yBlock + sideBlock) ;
		
		
		// check if hit the top of block
		Point2D interA = intersectLine(blockTopLine, path);
		if(interA != null) {
			allIntersections.add(new BouncePoint(interA.getX(),interA.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}

		// check if hit the bottom of block
		Point2D interD = intersectLine(blockBottomLine, path);	
		if(interD != null) {
			allIntersections.add(new BouncePoint(interD.getX(),interD.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}


		// check if hit the right side of block
		Point2D interC = intersectLine(blockRightLine, path);
		if(interC != null) {
			allIntersections.add( new BouncePoint(interC.getX(),interC.getY(),BouncePoint.BounceDirection.FLIP_X));
		}

		// check if hit the left side of block
		Point2D interB = intersectLine(blockLeftLine, path);
		if(interB != null) {
			allIntersections.add( new BouncePoint(interB.getX(),interB.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		
		// Check if hit the left upper corner from the left
		Point2D interLeftE = intersectArc(xBlock,yBlock,ballRadius,Math.PI*0.75,Math.PI,path,10);
		if(interLeftE != null) {
			allIntersections.add( new BouncePoint(interLeftE.getX(),interLeftE.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		
		// Check if hit the left upper corner from the right
		Point2D interRightE = intersectArc(xBlock,yBlock,ballRadius,Math.PI*0.5,Math.PI*0.75,path,10);
		if(interRightE != null) {
			allIntersections.add( new BouncePoint(interRightE.getX(),interRightE.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}
		
		// Check if hit the right upper corner from the left
		Point2D interLeftF = intersectArc(xBlock + sideBlock ,yBlock,ballRadius,Math.PI*0.25,Math.PI*0.5,path,10);
		if(interLeftF != null) {
			allIntersections.add( new BouncePoint(interLeftF.getX(),interLeftF.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}
		
		// Check if hit the right upper corner from the right
		Point2D interRightF = intersectArc(xBlock + sideBlock ,yBlock,ballRadius,0,Math.PI*0.25,path,10);
		if(interRightF != null) {
			allIntersections.add( new BouncePoint(interRightF.getX(),interRightF.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		
		// Check if hit the left lower corner from the left
		Point2D interLeftG = intersectArc(xBlock,yBlock + sideBlock,ballRadius,Math.PI,Math.PI*1.25,path,10);
		if(interLeftG != null) {
			allIntersections.add( new BouncePoint(interLeftG.getX(),interLeftG.getY(),BouncePoint.BounceDirection.FLIP_X));
		}

		// Check if hit the left lower corner from the right
		Point2D interRightG = intersectArc(xBlock,yBlock + sideBlock,ballRadius,Math.PI*1.25,Math.PI*1.5,path,10);
		if(interRightG != null) {
			allIntersections.add( new BouncePoint(interRightG.getX(),interRightG.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}

		// Check if hit the right lower corner from the left
		Point2D interLeftH = intersectArc(xBlock + sideBlock ,yBlock + sideBlock,ballRadius,Math.PI*1.5,Math.PI*1.75,path,10);
		if(interLeftH != null) {
			allIntersections.add( new BouncePoint(interLeftH.getX(),interLeftH.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}

		// Check if hit the right lower corner from the right
		Point2D interRightH = intersectArc(xBlock + sideBlock ,yBlock + sideBlock,ballRadius,Math.PI*1.75,Math.PI*2,path,10);
		if(interRightH != null) {
			allIntersections.add( new BouncePoint(interRightH.getX(),interRightH.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		
		
		//return the nearest intersection
				if(allIntersections.isEmpty()) {
					return null;
				}else {
					double dist;
					int minIndex = 0;
					double min= Double.MAX_VALUE;
					for(int i=0;i<allIntersections.size(); i++) {
						dist=distance(allIntersections.get(i).getX(),allIntersections.get(i).getY(),getCurrentBallX(),getCurrentBallY());
						if(dist<min) {
							min=dist;
							minIndex=i;
						}
					}
					returnedBp = allIntersections.get(minIndex);
					returnedBp.setHitBlock(block);
					// return null if bp is exactly at the new ball position
					if(returnedBp.getX() == currentBallX + ballDirectionY & returnedBp.getY() == currentBallY + ballDirectionY ) {
						returnedBp = null;
					}
					
					return returnedBp;
				}
  }


   private void bounceBall(){
    BouncePoint bounce = getBounce();
	   double newDirectionX = 0;
	   double newDirectionY = 0;
		//computing euclidian distance
	   // incoming distance: the distance between the current position of the center of the ball (currentBallX/Y) and the position of the bounce point
	   double inDist = Math.pow((bounce.getX() - currentBallX),2) +Math.pow((bounce.getY() - currentBallY),2);
	   inDist = Math.sqrt(inDist);
	   
	   // outcoming distance: the remaining distance after bounce point
	   double totalDist=Math.sqrt((ballDirectionX*ballDirectionX +ballDirectionY*ballDirectionY));
	   double remDist = totalDist-inDist;
	   
	   if(remDist == 0) { //new ball position is at bounce point
		   newDirectionX = ballDirectionX;
		   newDirectionY = ballDirectionY;
		   currentBallX = bounce.getX();
		   currentBallY = bounce.getY();
	   }
	   else if( bounce.getDirection() == BouncePoint.BounceDirection.FLIP_Y ) {
		   // ball direction updated
		   newDirectionX = ballDirectionX + signum(ballDirectionX)*(0.1)*Math.abs(ballDirectionY) ;
		   newDirectionY = (-1)*ballDirectionY ;
		   // current ball position updated
		   currentBallX = bounce.getX() + (remDist/totalDist) * newDirectionX ;
		   currentBallY = bounce.getY() + (remDist/totalDist) * newDirectionY ;
	   }
	   else if ( bounce.getDirection() == BouncePoint.BounceDirection.FLIP_X ) {
		   // ball direction updated
		   newDirectionX = (-1)*ballDirectionX ;
		   newDirectionY = ballDirectionY + signum(ballDirectionY)*(0.1)*Math.abs(ballDirectionX);
		   // current ball position updated
		   currentBallX = bounce.getX() + (remDist/totalDist) * newDirectionX ;
		   currentBallY = bounce.getY() + (remDist/totalDist) * newDirectionY ;
	   }
	   else if ( bounce.getDirection() == BouncePoint.BounceDirection.FLIP_BOTH ){
		   // ball direction updated
		   newDirectionX = (-1)*ballDirectionX ;
		   newDirectionY = (-1)*ballDirectionY ;
		   // current ball position updated
		   currentBallX = bounce.getX() + (remDist/totalDist) * newDirectionX ;
		   currentBallY = bounce.getY() + (remDist/totalDist) * newDirectionY ;
	   }

	   ballDirectionX = newDirectionX;
	   ballDirectionY = newDirectionY;
  }

   
   private BouncePoint calculateBouncePointWall(){
	    ArrayList<BouncePoint> allIntersections = new ArrayList<BouncePoint>();
			
		Line2D path = new Line2D.Double(getCurrentBallX(), getCurrentBallY(), getCurrentBallX()+getBallDirectionX(), getCurrentBallY()+getBallDirectionY());

		
		Line2D sectA = new Line2D.Double(
				Ball.BALL_DIAMETER/2, Ball.BALL_DIAMETER/2,
				Ball.BALL_DIAMETER/2, Game.PLAY_AREA_SIDE-Ball.BALL_DIAMETER/2);
		
		Line2D sectB = new Line2D.Double(
				Ball.BALL_DIAMETER/2, Ball.BALL_DIAMETER/2,
				Game.PLAY_AREA_SIDE-Ball.BALL_DIAMETER/2, Ball.BALL_DIAMETER/2);
		
		Line2D sectC = new Line2D.Double(
				Game.PLAY_AREA_SIDE-Ball.BALL_DIAMETER/2, Ball.BALL_DIAMETER/2,
				Game.PLAY_AREA_SIDE-Ball.BALL_DIAMETER/2, Game.PLAY_AREA_SIDE-Ball.BALL_DIAMETER/2);
		
		//intersect the ball path line with sectors A,B,C and add computed intersections to list of intersected lines
		Point2D interA = intersectLine(sectA, path);
		if(interA != null) {
			allIntersections.add(new BouncePoint(interA.getX(),interA.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		Point2D interB = intersectLine(sectB, path);
		if(interB != null) {
			allIntersections.add( new BouncePoint(interB.getX(),interB.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}
		Point2D interC = intersectLine(sectC, path);
		if(interC != null) {
			allIntersections.add( new BouncePoint(interC.getX(),interC.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		
		//return the nearest intersection
		if(allIntersections.isEmpty()) {
			return null;
		}else {
			double dist;
			int minIndex = 0;
			double min= Double.MAX_VALUE;
			for(int i=0;i<allIntersections.size(); i++) {
				dist=distance(allIntersections.get(i).getX(),allIntersections.get(i).getY(),getCurrentBallX(),getCurrentBallY());
				if(dist<min) {
					min=dist;
					minIndex=i;
				}
			}
			BouncePoint closest;
			//check if the point is one of the two corners and adjust bounce direction otherwise return nearest intersection
			if((allIntersections.get(minIndex).getX()==5.0 && allIntersections.get(minIndex).getY()==5.0)||
					(allIntersections.get(minIndex).getX()==385.0 && allIntersections.get(minIndex).getY()==5.0)) {
				closest= new BouncePoint(allIntersections.get(minIndex).getX(),allIntersections.get(minIndex).getY(),BouncePoint.BounceDirection.FLIP_BOTH);
			}else {
				closest=allIntersections.get(minIndex);
			}
			
			if(closest.getX()==(currentBallX+ballDirectionX) &&
					closest.getY()==(currentBallY+ballDirectionY)) {
				return null;
			}else {
				return closest;
			}
			 
		}
 }
 		
 		
 		
 		
 			
		private boolean isBallOutOfBounds() { 
		boolean outofbounds = false; 
		if(getCurrentBallY()+ getBallDirectionY() +5 > 390){
			outofbounds = true;
		}
		return outofbounds; 
		}
	
 
 

    private BouncePoint calculateBouncePointPaddle(){
    ArrayList<BouncePoint> allIntersections = new ArrayList<BouncePoint>();
		Rectangle2D paddle = new Rectangle2D.Double(getCurrentPaddleX()- Ball.BALL_DIAMETER/2,getCurrentPaddleY()- Ball.BALL_DIAMETER/2,getCurrentPaddleLength()+ Ball.BALL_DIAMETER,Paddle.PADDLE_WIDTH+ Ball.BALL_DIAMETER/2);
				
		Line2D path = new Line2D.Double(getCurrentBallX(), getCurrentBallY(), getCurrentBallX()+getBallDirectionX(), getCurrentBallY()+getBallDirectionY());
		
		if(!paddle.intersectsLine(path)) {
			return null;
		}
		
		Line2D sectA = new Line2D.Double(
				getCurrentPaddleX(),getCurrentPaddleY() - Ball.BALL_DIAMETER/2,
				getCurrentPaddleX() + getCurrentPaddleLength(), getCurrentPaddleY() - Ball.BALL_DIAMETER/2);
		
		Line2D sectB = new Line2D.Double(
				getCurrentPaddleX() - Ball.BALL_DIAMETER/2,getCurrentPaddleY(),
				getCurrentPaddleX() - Ball.BALL_DIAMETER/2, getCurrentPaddleY() + Paddle.PADDLE_WIDTH);
		
		Line2D sectC = new Line2D.Double(
				getCurrentPaddleX() + getCurrentPaddleLength() + Ball.BALL_DIAMETER/2,getCurrentPaddleY(),
				getCurrentPaddleX() + getCurrentPaddleLength() + Ball.BALL_DIAMETER/2, getCurrentPaddleY() + Paddle.PADDLE_WIDTH);
		
		//intersect the ball path line with sectors A,B,C and add computed intersections to list of intersected lines
		Point2D interA = intersectLine(sectA, path);
		if(interA != null) {
			allIntersections.add(new BouncePoint(interA.getX(),interA.getY(),BouncePoint.BounceDirection.FLIP_Y));
		}
		Point2D interB = intersectLine(sectB, path);
if(interB != null) {
			allIntersections.add( new BouncePoint(interB.getX(),interB.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		Point2D interC = intersectLine(sectC, path);
		if(interC != null) {
			allIntersections.add( new BouncePoint(interC.getX(),interC.getY(),BouncePoint.BounceDirection.FLIP_X));
		}
		
		//intersect the ball path line with sectors E,F and add computed intersections to list of intersected lines

		Point2D interLeftE = intersectArc(getCurrentPaddleX(),getCurrentPaddleY(),Ball.BALL_DIAMETER/2,Math.PI*0.75,Math.PI,path,20);
		if(interLeftE != null) {
			allIntersections.add( new BouncePoint(interLeftE.getX(),interLeftE.getY(),getBallDirectionX()<0?BouncePoint.BounceDirection.FLIP_Y:BouncePoint.BounceDirection.FLIP_X));
		}
		Point2D interRightE = intersectArc(getCurrentPaddleX(),getCurrentPaddleY(),Ball.BALL_DIAMETER/2,Math.PI*0.5,Math.PI*0.75,path,20);
		if(interRightE != null) {
			allIntersections.add( new BouncePoint(interRightE.getX(),interRightE.getY(),getBallDirectionX()<0?BouncePoint.BounceDirection.FLIP_Y:BouncePoint.BounceDirection.FLIP_X));
		}
		Point2D interLeftF = intersectArc(getCurrentPaddleX()+getCurrentPaddleLength(),getCurrentPaddleY(),Ball.BALL_DIAMETER/2,0.0,Math.PI*0.25,path,20);
		if(interLeftF != null) {
			allIntersections.add( new BouncePoint(interLeftF.getX(),interLeftF.getY(),getBallDirectionX()<0?BouncePoint.BounceDirection.FLIP_X:BouncePoint.BounceDirection.FLIP_Y));
		}
		Point2D interRightF = intersectArc(getCurrentPaddleX()+getCurrentPaddleLength(),getCurrentPaddleY(),Ball.BALL_DIAMETER/2,Math.PI*0.25,Math.PI*0.5,path,20);
		if(interRightF != null) {
			allIntersections.add( new BouncePoint(interRightF.getX(),interRightF.getY(),getBallDirectionX()<0?BouncePoint.BounceDirection.FLIP_X:BouncePoint.BounceDirection.FLIP_Y));
		}
		
		//return the nearest intersection
		if(allIntersections.isEmpty()) {
			return null;
		}else {
			double dist;
			int minIndex = 0;
			double min= Double.MAX_VALUE;
			for(int i=0;i<allIntersections.size(); i++) {
				dist=distance(allIntersections.get(i).getX(),allIntersections.get(i).getY(),getCurrentBallX(), getCurrentBallY());
				if(dist<min) {
					min=dist;
					minIndex=i;
				}
			}
			if(allIntersections.get(minIndex).getX()==(currentBallX+ballDirectionX) &&
					allIntersections.get(minIndex).getY()==(currentBallY+ballDirectionY)) {
				return null;
			}else {
				return allIntersections.get(minIndex);
			}
		}
  }
	
	//find euclidian distance squared
	private double distance(double x1,double y1,double x2,double y2) {
		return Math.pow(x2-x1, 2) +Math.pow(y2-y1, 2);
	}
	
	//intersect line with an arc by dividing the arc into smaller segments which are then checked for intersection using intersectLine
	//higher divisions means greater intersection accuracy
	//parameters:
	//aX,aY center of circle of radius aRadius
	//aAngleStart and aAngleEnd define the location of the arc on the circle, angles in radians going from 0 to 2pi counterclockwise
	//l1 should be the ball path line
	//divisions is the number of segments the arc is divided into, recommend using less than 10 since the arc is very small anyways
   private Point2D intersectArc(double aX, double aY, double aRadius, double aAngleStart, double aAngleEnd, Line2D l1, double divisions){

	   double granularity = (aAngleEnd - aAngleStart) / divisions;

		//arc is divided into divisions number of segments then segments are intersected counterclockwise until
		//having covered the entire arc 
		for( double rad = aAngleStart; rad<=(aAngleEnd-granularity); rad+=granularity) {
			Line2D arcSection = new Line2D.Double(
					aRadius * Math.cos(rad) + aX, -aRadius * Math.sin(rad) + aY,
					aRadius * Math.cos(rad+granularity) + aX, -aRadius * Math.sin(rad+granularity) + aY);
			
			Point2D inter=intersectLine(arcSection, l1);

			if(inter!=null) {
				double a=Math.round(inter.getX()*10)/10;
				double b=Math.round(inter.getY()*10)/10;
				Point2D rounded = new Point2D.Double(a,b);
				return rounded; 
				
			}
			
		}
		
		
		return null;
  }
	
	//return intersection point of two lines if it exist
   private Point2D intersectLine(Line2D l1, Line2D l2){
    double a1,a2,c1,c2,x,y;
    double vertY;
    	if(l1.getX1()==l1.getX2() && l2.getX1()==l2.getX2()) {
    		return null;
    	}
    	if(l1.getX1()==l1.getX2()) {
    		a2=(l2.getY2() - l2.getY1()) / (l2.getX2() - l2.getX1());
    		c2= l2.getY1() - a2 * l2.getX1();
    		//y=x*a+c
    		vertY=l1.getX1()*a2+c2;
    		
    		if((Math.min(l1.getX1(),l1.getX2()) <= l1.getX1() && l1.getX1() <= Math.max(l1.getX1(),l1.getX2()))
    				&& (Math.min(l2.getX1(),l2.getX2()) <= l1.getX1() && l1.getX1() <= Math.max(l2.getX1(),l2.getX2()))
    				&& (Math.min(l1.getY1(),l1.getY2()) <= vertY && vertY <= Math.max(l1.getY1(),l1.getY2()))
    				&& (Math.min(l2.getY1(),l2.getY2()) <= vertY && vertY <= Math.max(l2.getY1(),l2.getY2()))) {
    			
    			Point2D intersection = new Point2D.Double(l1.getX1(),vertY);
    			
    			return intersection;
    		}else {
    			return null;
    		}
    		
    	}
    	if(l2.getX1()==l2.getX2()) {

    		a1=(l1.getY2() - l1.getY1()) / (l1.getX2() - l1.getX1());
    		c1= l1.getY1() - a1 * l1.getX1();
    		//y=x*a+c
    		vertY=l2.getX1()*a1+c1;
    		
    		if((Math.min(l1.getX1(),l1.getX2()) <= l2.getX1() && l2.getX1() <= Math.max(l1.getX1(),l1.getX2()))
    				&& (Math.min(l2.getX1(),l2.getX2()) <= l2.getX1() && l2.getX1() <= Math.max(l2.getX1(),l2.getX2()))
    				&& (Math.min(l1.getY1(),l1.getY2()) <= vertY && vertY <= Math.max(l1.getY1(),l1.getY2()))
    				&& (Math.min(l2.getY1(),l2.getY2()) <= vertY && vertY <= Math.max(l2.getY1(),l2.getY2()))) {
    			
    			Point2D intersection = new Point2D.Double(l2.getX1(),vertY);
    			
    			return intersection;
    		}else {
    			return null;
    		}
    		
    	}
    
		a1=(l1.getY2() - l1.getY1()) / (l1.getX2() - l1.getX1());
		a2=(l2.getY2() - l2.getY1()) / (l2.getX2() - l2.getX1());
		c1= l1.getY1() - a1 * l1.getX1();
		c2= l2.getY1() - a2 * l2.getX1();
		
		if(a1==a2) {
			return null;
		}
		x=(c2 - c1) / (a1 - a2);
		if((Math.min(l1.getX1(),l1.getX2()) <= x && x <= Math.max(l1.getX1(),l1.getX2()))
				&& (Math.min(l2.getX1(),l2.getX2()) <= x && x <= Math.max(l2.getX1(),l2.getX2()))) {
			
			y=a1 * x + c1;

			Point2D intersection = new Point2D.Double(x,y);
			
			return intersection;
		}else {
			return null;
		}
		

  }
	
	private boolean isCloser(BouncePoint first, BouncePoint second) {
	   boolean isCloser = false;
	   if(second == null) {
		   isCloser =  true;
	   }
	   else if(first == null) {
		   isCloser = false;
	   }
	   else if(distance(first.getX(),first.getY(),currentBallX,currentBallY) > distance(second.getX(),second.getY(),currentBallX,currentBallY) ) {
		 isCloser = true;
	 }
	   return isCloser;
			   
   }
	
	
	

   before constructor {
      boolean didAddGameResult = setGame(aGame);
      if (!didAddGameResult)
      {
         throw new RuntimeException("Unable to create playedGame due to game");
      }
   }

}

class PlayedBlockAssignment {
   // the associated block is either (a) the same as the one of the corresponding BlockAssignent or (b) randomly chosen
   * -- 1 Block block;
   // the position of a block is at its top right corner
   Integer x;
   Integer y;
}

class HallOfFameEntry {
   Integer score;
   playername; // added here so that it only needs to be determined once
   * -- 1 Player player;
   // the sorted keyword keeps the list of entries in the game automatically sorted by the score
   * sorted {score} -- 1 Game game;
}

// this class needs to be specified but the use of it is optional; it is also not added to the persistence file
// you may implement bounce behavior differently
class BouncePoint {
   Double x;
   Double y;
   enum BounceDirection { FLIP_X, FLIP_Y, FLIP_BOTH }
   BounceDirection direction;
   0..1 -> 0..1 PlayedBlockAssignment hitBlock;
}

class User {
   public static String findUsername(UserRole userRole) {
      for (String key : usersByUsername.keySet()) {
         if (usersByUsername.get(key).getRoles().contains(userRole))
            return key;
      }
      return null;
   }
}