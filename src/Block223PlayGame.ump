namespace ca.mcgill.ecse223.block.model;

class Game {
	1 <@>- * SpecificGame specificGames;
	1 -- * Score gameScores; //After game is over it is deleted. Only it's scores need to be saved for future games

	lazy immutable Boolean published;
}

class Level {
}

class Player {
	1 -- * Score playerScores;
	1 -- * SpecificGame specificGames;
}

class SpecificGame {
	1 -- * Score;
	1 <@>- * SpecificBlockAssignment specificBlockAssignments;

	autounique id;
	defaulted Integer nrOfLife = 3;
	defaulted Integer currentLevelPlayed = 1;
	defaulted Integer ballPosX = 195;
	defaulted Integer ballPosY = 195;
	defaulted Integer directionX = game.getBall().getMinBallSpeedX();
	defaulted Integer directionY = game.getBall().getMinBallSpeedY();
	defaulted Integer paddlePosX = 195 - (game.getPaddle().getMaxPaddleLength() / 2);
	defaulted Integer paddlePosY = 195;

	private boolean levelCompleted() {
		return false;
	}

	private boolean gameCompleted() {
		return false;
	}

	private boolean isWallPaddleHit() {
		return false;
	}

	private boolean isBlockHit() {
		return false;
	}

	private boolean isOutOfBounds() {
		return false;
	}

	private void saveGame() {
	}

	private void saveScoreAndDelete() {
	}

	private void doWallPaddleHit() {
	}

	private void doBlockHit() {
	}

	private void doOutOfBounds() {
	}

	private static int signum(int a) {
		return a < 0 ? -1 : 1;
	}

	private boolean paddleIntersecting() {
		return false;
	}

	private void loadNextLevel() {
	}
}

class Score {
	Integer points;
}

class SpecificBlockAssignment {
	* -- 1 Level level;
	* -> 1 Block block;
	//specific block assignments by pixel positions
	immutable Integer positionX;
	immutable Integer positionY;
}

class User {
	public static String getPlayerUsername(Player) {
		return "";
	}
}
