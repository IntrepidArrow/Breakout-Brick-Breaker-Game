class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
    // TODO implement
    return false;
  }

  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlock(){
    // TODO implement
    return false;
  }
  
  private boolean hitBlock() {
    // TODO implement
    return false;
  }
  
  private boolean hitWall() {
    // TODO implement
    return false;
  }
  
  // Actions
  
  private void doSetup() {
    this.resetCurrentBallX();
    this.resetCurrentBallY();
    this.resetBallDirectionX();
    this.resetBallDirectionY();
    this.resetCurrentPaddleX();
    Level level = game.getLevel(currentLevel - 1);
    List<BlockAssignment> blockAssignments = level.getBlockAssignments();
    for (BlockAssignment a : blockAssignments) {
	  PlayedBlockAssignment p = new PlayedBlockAssignment(
		Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (a.getGridHorizontalPosition() - 1),
		Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (a.getGridVerticalPosition() - 1),
		a.getBlock(), this);
    }
    while (numberOfBlocks() < game.getNrBlocksPerLevel()) {
	  Random rand = new Random();
	  int x = rand.nextInt(game.getMaxNumberHorizontalBlocks()) + 1;
	  int y = rand.nextInt(game.getMaxNumberVerticalBlocks()) + 1;
	  while (true) {
		final int finalX = Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (x - 1);
		final int finalY = Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (y - 1);
		if (blocks.stream().noneMatch(b -> (b.getX() == finalX && b.getY() == finalY))) {
		  PlayedBlockAssignment p = new PlayedBlockAssignment(finalX, finalY, game.getRandomBlock(), this);
		  break;
		}
		if (x < game.getMaxNumberHorizontalBlocks())
		  x++;
		else if (y < game.getMaxNumberVerticalBlocks()) {
		  y++;
		  x = 1;
		}
		else {
		  x = 1;
		  y = 1;
		}
	  }
	}
  }
  
  private void doHitPaddleOrWall() {
    // TODO implement
  }

  private void doOutOfBounds() {
    // TODO implement
  }

  private void doHitBlock() {
    // TODO implement
  }

  private void doHitBlockNextLevel() {
    // TODO implement
  }

  private void doHitNothingAndNotOutOfBounds() {
    double x = getCurrentBallX();
    double y = getCurrentBallY();
    double dx = getBallDirectionX();
    double dy = getBallDirectionY();
    setCurrentBallX(x+dx);
    setCurrentBallY(y+dy);
  }

  private void doGameOver() {
    // TODO implement
  }

}
