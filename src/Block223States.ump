class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
	BouncePoint bp = calculateBouncePointPaddle();
	if(bp == null){
		return false;
	}
	setBounce(bp);	

    return true;
  }

  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
    // TODO implement
    boolean isLastBV = false;
	   Game game = getGame();
	   int nrLevels = game.numberOfLevels();
	   this.setBounce(null);
	   
	   if( nrLevels == currentLevel ) {
		   int nrBlocks = numberOfBlocks();
		   
		   if( nrBlocks == 1 ) {
			   PlayedBlockAssignment block = getBlock(0);
			   BouncePoint bp = calculateBouncePointBlock(block);
			   setBounce(bp);
			   isLastBV = true;
			 }
		  }
	   
    return isLastBV;
  }
  
  private boolean hitLastBlock(){
    // TODO implement
    boolean isLastB = false;
	   int nrBlocks = numberOfBlocks();
	   setBounce(null);
	   
	   if( nrBlocks == 1 ) {
		   PlayedBlockAssignment block = getBlock(0);
		   BouncePoint bp = calculateBouncePointBlock(block);
		   setBounce(bp);
		   isLastB = true;
	   }
	   return isLastB;
  }
  
  private boolean hitBlock() {
    // TODO implement
   int nrBlocks = numberOfBlocks();
	   setBounce(null);
	   
	   for ( int i = 0 ; i < nrBlocks ; i++ ) {
		   PlayedBlockAssignment block = getBlock(i);
		   BouncePoint bp = calculateBouncePointBlock(block);
		   BouncePoint bounce = getBounce();
		   boolean closer = isCloser(bp,bounce);
		   if(closer) {
			   setBounce(bp);
		   }
	   }
    return getBounce() != null;
  }
  
  private boolean hitWall() {
   	BouncePoint bp = calculateBouncePointWall();
	if(bp == null){
		return false;
	}
	setBounce(bp);	

    return true;
  }
  
  // Actions
  
  private void doSetup() {
    this.resetCurrentBallX();
    this.resetCurrentBallY();
    this.resetBallDirectionX();
    this.resetBallDirectionY();
    this.resetCurrentPaddleX();
    Level level = game.getLevel(currentLevel - 1);
    List<BlockAssignment> blockAssignments = level.getBlockAssignments();
    for (BlockAssignment a : blockAssignments) {
	  PlayedBlockAssignment p = new PlayedBlockAssignment(
		Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (a.getGridHorizontalPosition() - 1),
		Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (a.getGridVerticalPosition() - 1),
		a.getBlock(), this);
    }
    while (numberOfBlocks() < game.getNrBlocksPerLevel()) {
	  Random rand = new Random();
	  int x = rand.nextInt(game.getMaxNumberHorizontalBlocks()) + 1;
	  int y = rand.nextInt(game.getMaxNumberVerticalBlocks()) + 1;
	  while (true) {
		final int finalX = Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (x - 1);
		final int finalY = Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (y - 1);
		if (blocks.stream().noneMatch(b -> (b.getX() == finalX && b.getY() == finalY))) {
		  PlayedBlockAssignment p = new PlayedBlockAssignment(finalX, finalY, game.getRandomBlock(), this);
		  break;
		}
		if (x < game.getMaxNumberHorizontalBlocks())
		  x++;
		else if (y < game.getMaxNumberVerticalBlocks()) {
		  y++;
		  x = 1;
		}
		else {
		  x = 1;
		  y = 1;
		}
	  }
	}
  }
  
  private void doHitPaddleOrWall() {
	bounceBall();
	return;
  }

  private void doOutOfBounds() {
    // TODO implement
  }

  private void doHitBlock() {
    // TODO implement
    int score = getScore();
	   BouncePoint bounce = getBounce();
	   PlayedBlockAssignment pblock = bounce.getHitBlock();
	   int bscore = pblock.getBlock().getPoints();
	   setScore(score + bscore);
	   pblock.delete();
	   bounceBall();
  }

  private void doHitBlockNextLevel() {
    // TODO implement
    doHitBlock();
	   int level = getCurrentLevel();
	   setCurrentLevel(level++);
	   int paddleLength = getGame().getPaddle().getMaxPaddleLength() - 
			   			( getGame().getPaddle().getMaxPaddleLength() - getGame().getPaddle().getMinPaddleLength() ) /
			   			( getGame().numberOfLevels() - 1 ) * ( getCurrentLevel() - 1 ) ;
	   setCurrentPaddleLength(paddleLength);
	   setWaitTime( INITIAL_WAIT_TIME * Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), ( getCurrentLevel() - 1 )));
  }

  private void doHitNothingAndNotOutOfBounds() {
    double x = getCurrentBallX();
    double y = getCurrentBallY();
    double dx = getBallDirectionX();
    double dy = getBallDirectionY();
    setCurrentBallX(x+dx);
    setCurrentBallY(y+dy);
  }

  private void doGameOver() {
    // TODO implement
  }

}
