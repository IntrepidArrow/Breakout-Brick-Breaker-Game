namespace ca.mcgill.ecse223.block.model;

use Block223Persistence.ump;
use Block223PlayGame.ump;
use Block223States.ump;


class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   public Game findGame(String name) {
	  List<Game> games = this.getGames();
	  for (Game game : games) {
		  if (game.getName() == name)
			return game;
	  }
	  return null;
  }
}

class User {
   unique username;
	   before constructor {
   	if(aUsername == null || aUsername.isEmpty()){
   	throw new RuntimeException("The username must be specified.");    
   	}
   	if (!setUsername(aUsername))
    {
      throw new RuntimeException("The username has already been taken.");
    }
   }
	
   1 -> 1..2 UserRole roles;
	
}	

class UserRole {
   abstract;
   password;
   before constructor, setPassword {
   	if(aPassword == null || aPassword.isEmpty()){
   		throw new RuntimeException("The player password needs to be specified.");
   	}
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
   public Block findBlock(int id) {
	  Block foundBlock = null;
	  List<Block> blocks = this.getBlocks();
	  for(Block block : blocks) {
		  if(block.getId() == id) {
			  foundBlock = block;
		  }
	  }
	  return foundBlock;
  }
  
  before setNrBlocksPerLevel, constructor {
  	if(aNrBlocksPerLevel <= 0){
  		throw new RuntimeException("The number of blocks per level must be greater than zero.");
  		}
  	}
  before setName {
  	if(aName == null){
  		throw new RuntimeException("The name of a ame must be specified.");
  	}
  }
  	
  public int getMaxNumberHorizontalBlocks() {
	  int maxNbr = Math.floorDiv( PLAY_AREA_SIDE - 2*WALL_PADDING , (Block.SIZE + COLUMNS_PADDING) );
	  return maxNbr;
  }
  public int getMaxNumberVerticalBlocks() {
	  int maxNbr = Math.floorDiv( PLAY_AREA_SIDE - WALL_PADDING - 30 - 5 - 10 , (Block.SIZE + ROW_PADDING) ); 
	  return maxNbr;
  }
  
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   before constructor, setRed {
   	if((aRed < 0) || (aRed > 255)){
   		throw new RuntimeException("Red must be between 0 and 255.");
   	}
   }
   Integer green;
      before constructor, setGreen {
   	if((aGreen < 0) || (aGreen > 255)){
   		throw new RuntimeException("Green must be between 0 and 255.");
   	}
   }
   Integer blue;
      before constructor, setBlue {
   	if((aBlue < 0) || (aBlue > 255)){
   		throw new RuntimeException("Blue must be between 0 and 255.");
   	}
   }
   Integer points;
      before constructor, setPoints {
   	if((aPoints < 1) || (aPoints > 1000)){
   		throw new RuntimeException("Points must be between 1 and 1000.");
   	}
   }
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
public BlockAssignment findBlockAssignment(int gridHorizontalPosition, int gridVerticalPosition){
	  BlockAssignment foundBlockAssignment = null;
  for(BlockAssignment blockAssignment : this.getBlockAssignments()) {
		if( blockAssignment.getGridHorizontalPosition() == gridHorizontalPosition && blockAssignment.getGridVerticalPosition() == gridVerticalPosition ) {
			foundBlockAssignment = blockAssignment;
			break;
		}
	}
  return foundBlockAssignment;
  }


}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
   
   before constructor{
   if(aGridHorizontalPosition < 1 || aGridHorizontalPosition > aGame.getMaxNumberHorizontalBlocks())
   throw new RuntimeException("The horizontal position must be between 1 and " + game.getMaxNumberHorizontalBlocks() + ".");
   }
   before setGridHorizontalPosition{
   if(aGridHorizontalPosition < 1 || aGridHorizontalPosition > game.getMaxNumberHorizontalBlocks())
   throw new RuntimeException("The horizontal position must be between 1 and " + game.getMaxNumberHorizontalBlocks() + ".");
   }
   before constructor{
   if(aGridVerticalPosition < 1 || aGridVerticalPosition > aGame.getMaxNumberVerticalBlocks())
   throw new RuntimeException("The vertical position must be between 1 and " + game.getMaxNumberVerticalBlocks() + ".");
   }
   
   before setGridVerticalPosition{
    if(aGridVerticalPosition < 1 || aGridVerticalPosition > game.getMaxNumberVerticalBlocks())
   throw new RuntimeException("The vertical position must be between 1 and " + game.getMaxNumberVerticalBlocks() + ".");
   }
   
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
   
   before setMinBallSpeedX, constructor{
   		if(aMinBallSpeedX <= 0){
   			throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   		}
   }
   before setMinBallSpeedY, constructor{
   		if(aMinBallSpeedY <= 0){
   			throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   		}
   }
   before setBallSpeedIncreaseFactor, constructor {
   		if(aBallSpeedIncreaseFactor <= 0){
   			throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
   		}
   }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
   
   before setMaxPaddleLength, constructor {
   		if((aMaxPaddleLength <= 0) || aMaxPaddleLength > 390){
   			throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
   		}
   }
   before setMinPaddleLength, constructor {
   		if(aMinPaddleLength <= 0){
   			throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
   		}
   }
}
